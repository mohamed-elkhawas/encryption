
def xor(txt_1,txt_2):
    x = []
    for i in range(txt_1.__len__()):
        x.append(str((int(list(txt_1)[i]) + int(list(txt_2)[i])) % 2))
    return x

def permeutation_box( choice , block):

    pc1 = [56, 48, 40, 32, 24, 16, 8,
           0, 57, 49, 41, 33, 25, 17,
           9, 1, 58, 50, 42, 34, 26,
           18, 10, 2, 59, 51, 43, 35,
           62, 54, 46, 38, 30, 22, 14,
           6, 61, 53, 45, 37, 29, 21,
           13, 5, 60, 52, 44, 36, 28,
           20, 12, 4, 27, 19, 11, 3
           ]

    pc2 = [
        13, 16, 10, 23, 0, 4,
        2, 27, 14, 5, 20, 9,
        22, 18, 11, 3, 25, 7,
        15, 6, 26, 19, 12, 1,
        40, 51, 30, 36, 46, 54,
        29, 39, 50, 44, 32, 47,
        43, 48, 38, 55, 33, 52,
        45, 41, 49, 35, 28, 31
    ]

    ip = [57, 49, 41, 33, 25, 17, 9, 1,
          59, 51, 43, 35, 27, 19, 11, 3,
          61, 53, 45, 37, 29, 21, 13, 5,
          63, 55, 47, 39, 31, 23, 15, 7,
          56, 48, 40, 32, 24, 16, 8, 0,
          58, 50, 42, 34, 26, 18, 10, 2,
          60, 52, 44, 36, 28, 20, 12, 4,
          62, 54, 46, 38, 30, 22, 14, 6
          ]

    expansion_table = [
        31, 0, 1, 2, 3, 4,
        3, 4, 5, 6, 7, 8,
        7, 8, 9, 10, 11, 12,
        11, 12, 13, 14, 15, 16,
        15, 16, 17, 18, 19, 20,
        19, 20, 21, 22, 23, 24,
        23, 24, 25, 26, 27, 28,
        27, 28, 29, 30, 31, 0
    ]

    p = [
        15, 6, 19, 20, 28, 11,
        27, 16, 0, 14, 22, 25,
        4, 17, 30, 9, 1, 7,
        23, 13, 31, 26, 2, 8,
        18, 12, 29, 5, 21, 10,
        3, 24
    ]

    fp = [
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25,
        32, 0, 40, 8, 48, 16, 56, 24
    ]

    if(choice == "init"):
        table = ip
    elif (choice == "ch1"):
        table = pc1
    elif (choice == "ch2"):
        table = pc2
    elif (choice == "exp"):
        table = expansion_table
    elif (choice == "32"):
        table = p
    elif (choice == "final"):
        table = fp
    else:
        return "error"
    return list(map(lambda x: block[x], table))

def s_box(input):

    input = [input[:6], input[6:12], input[12:18], input[18:24], input[24:30], input[30:36], input[36:42], input[42:]]

    sbox = [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
         0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
         4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
         15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],

        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
         3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
         0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
         13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],

        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
         13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
         13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
         1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],

        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
         13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
         10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
         3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],

        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
         14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
         4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
         11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],

        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
         10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
         9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
         4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],

        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
         13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
         1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
         6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],

        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
         1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
         7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
         2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
    ]

    output = ""
    for i in range(8):
        w=""
        ww = w.join(input[i])
        x = sbox[i][ ((int(ww[0] + ww[5], 2)) * 16 ) + int( ww[1:5] , 2) ]
        output +=  bin( x ).replace("0b", "").zfill(4)

    return list(output)

def key_generator(key):

    shifts = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]

    key = permeutation_box("ch1", key)
    right = key[28:]
    left = key[:28]
    output = []

    for i in range(16):
        temp = right[:shifts[i]]
        right = right[shifts[i]:] + temp
        temp = left[:shifts[i]]
        left = left[shifts[i]:] + temp
        output.append( permeutation_box("ch2",left+right) )

    return output

def DES(op,input_txt ,input_key):
    if input_txt.__len__() != 16 or input_key.__len__() != 16:
        return "input error"

    binary_txt = ""
    binary_key = ""
    for char in input_txt:
        binary_txt += bin(int(char, 16)).replace("0b", "").zfill(4)

    for char in input_key:
        binary_key += bin(int(char, 16)).replace("0b", "").zfill(4)

    key = key_generator(binary_key)

    binary_txt = permeutation_box("init", binary_txt)
    left = binary_txt[:32]
    right = binary_txt[32:]

    for i in range(16):

        temp_r = right
        right = permeutation_box("exp", right)
        if(op == "enc"):
            right = xor(right,key[i])
        elif(op == "dec"):
            right = xor(right,key[15 - i])

        right = s_box(right)
        right = permeutation_box("32", right)
        right = xor(right,left)
        left = temp_r

    binary_txt = right + left
    binary_txt = permeutation_box("final", binary_txt)
    the_final_str =""
    for i in range(0,binary_txt.__len__(),4):
        w = ""
        w = w.join(binary_txt[i:i+4])
        the_final_str += hex(int(w,2)).replace("0x","")
    the_final_str = the_final_str.swapcase()

    return the_final_str

# input_key ="0000000000000000"
# input_txt ="ffffffffffffffff"
# n_times = 1
# input_txt = "355550b2150e2451"

# the main
exit1 = ""
while exit1 !="n":
    input_key = input("enter the key :  ")
    input_txt = input("enter the text :  ")
    n_times = input("enter NO. times :  ")

    if (input_key.__len__() == 16 and input_key.__len__() == 16):
        for i in range(int(n_times)):
            input_txt = DES("enc", input_txt, input_key)
        print("output is :",input_txt)
    else:
        print("input error")

    print("/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\")
    exit1 =input("do you want to try again ? (Y:n)")
