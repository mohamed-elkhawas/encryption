
def print_2d_array_to_hexa(arr):
    str = ""
    for k in range(len(arr)):
        for i in range(len(arr[0])):
            if i % 4 == 0:
                print(str)
                str = ""
            sss = hex(arr[k][i]).replace("0x", "")
            if sss.__len__() == 1:
                sss = "0" + sss
            str += sss
    print(str)

def print_array_to_hexa(arr):
    str = ""
    for k in range(len(arr)):
        if k%4==0:
            print(str)
            str=""
        sss = hex(arr[k]).replace("0x", "")
        if sss.__len__() == 1:
            sss = "0" + sss
        str += sss

    print(str)

def no_lines_print_array_to_hexa(arr):
    str = ""
    for k in range(len(arr)):
        sss = hex(arr[k]).replace("0x", "")
        if sss.__len__() == 1:
            sss = "0" + sss
        str += sss

    print(str)

sbox = (     0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
             0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
             0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
             0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
             0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
             0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
             0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
             0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
             0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
             0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
             0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
             0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
             0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
             0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
             0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
             0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,)

inv_sbox = (     0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
                 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
                 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
                 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
                 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
                 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
                 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
                 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
                 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
                 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
                 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
                 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
                 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
                 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
                 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
                 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,)

def xor_hexa(txt_1,txt_2):

    # x = []
    # for i in range(txt_1.__len__()):
    #     w = (txt_1[i] ^ txt_2[i])%256
    #     if (w > int("1b", 16)):
    #         w = w ^ int("1b", 16)
    #     x.append(int(hex(w),16))
    # return x

    x = []
    for i in range(txt_1.__len__()):
        x.append(txt_1[i] ^ txt_2[i])
        # if (txt_1[i] ^ txt_2[i])> 0xff:
        #     print("errrrr")
    return x

def shift_rows(input):
    input[0+4*1], input[1+4*1], input[2+4*1], input[3+4*1] = input[1+4*1], input[2+4*1], input[3+4*1], input[0+4*1]
    input[0+4*2], input[1+4*2], input[2+4*2], input[3+4*2] = input[2+4*2], input[3+4*2], input[0+4*2], input[1+4*2]
    input[0+4*3], input[1+4*3], input[2+4*3], input[3+4*3] = input[3+4*3], input[0+4*3], input[1+4*3], input[2+4*3]

def inv_shift_rows(input):
    input[0+4*1], input[1+4*1], input[2+4*1], input[3+4*1] = input[3+4*1], input[0+4*1], input[1+4*1], input[2+4*1]
    input[0+4*2], input[1+4*2], input[2+4*2], input[3+4*2] = input[2+4*2], input[3+4*2], input[0+4*2], input[1+4*2]
    input[0+4*3], input[1+4*3], input[2+4*3], input[3+4*3] = input[1+4*3], input[2+4*3], input[3+4*3], input[0+4*3]

def s_box(input):
    for i in range(16):
        input[i] = sbox[input[i]]

def inv_s_box(input):
    for i in range(16):
        input[i] = inv_sbox[input[i]]

def mod_mul(nn):
    if (nn & 0x80):
        return (((nn << 1) ^ 0x1B) & 0xFF)
    else:
        return (nn << 1)

def mix_columns(input):

    hexa_txt_2 = []
    for i in range(0, 16, 4):
        hexa_txt_2.append(input[i:i + 4])

    for i in range(4):
        temp1 = hexa_txt_2[0][i] ^ hexa_txt_2[1][i] ^ hexa_txt_2[2][i] ^ hexa_txt_2[3][i]
        temp2 = hexa_txt_2[0][i]
        hexa_txt_2[0][i] ^= temp1 ^ mod_mul(hexa_txt_2[0][i] ^ hexa_txt_2[1][i])
        hexa_txt_2[1][i] ^= temp1 ^ mod_mul(hexa_txt_2[1][i] ^ hexa_txt_2[2][i])
        hexa_txt_2[2][i] ^= temp1 ^ mod_mul(hexa_txt_2[2][i] ^ hexa_txt_2[3][i])
        hexa_txt_2[3][i] ^= temp1 ^ mod_mul(hexa_txt_2[3][i] ^ temp2)

    res2 = []
    for i in range(4):
        for j in range(4):
            w = hexa_txt_2[i][j]
            res2.append( w )

    return res2

def inv_mix_columns(input):

    hexa_txt_2 = []
    for i in range(0, 16, 4):
        hexa_txt_2.append(input[i:i + 4])

    for i in range(4):
        temp1 = mod_mul(mod_mul(hexa_txt_2[i][0] ^ hexa_txt_2[i][2]))
        temp2 = mod_mul(mod_mul(hexa_txt_2[i][1] ^ hexa_txt_2[i][3]))
        hexa_txt_2[i][0] ^= temp1
        hexa_txt_2[i][1] ^= temp2
        hexa_txt_2[i][2] ^= temp1
        hexa_txt_2[i][3] ^= temp2


    for i in range(4):
        temp1 = hexa_txt_2[0][i] ^ hexa_txt_2[1][i] ^ hexa_txt_2[2][i] ^ hexa_txt_2[3][i]
        temp2 = hexa_txt_2[0][i]
        hexa_txt_2[0][i] ^= temp1 ^ mod_mul(hexa_txt_2[0][i] ^ hexa_txt_2[1][i])
        hexa_txt_2[1][i] ^= temp1 ^ mod_mul(hexa_txt_2[1][i] ^ hexa_txt_2[2][i])
        hexa_txt_2[2][i] ^= temp1 ^ mod_mul(hexa_txt_2[2][i] ^ hexa_txt_2[3][i])
        hexa_txt_2[3][i] ^= temp1 ^ mod_mul(hexa_txt_2[3][i] ^ temp2)

    res2 = []
    for i in range(4):
        for j in range(4):
            w = hexa_txt_2[i][j]
            res2.append( w )

    return res2

def key_generator(input_key):

    rcon = [[0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
            ]

    key = [[], [], [], []]
    for i in range(0, 32, 2):
        key[int(i / 8)].append(int(input_key[i:i + 2], 16))

    # print(key_1)
    #
    # key = [[[], [], [], []], [[], [], [], []], [[], [], [], []], [[], [], [], []]]
    # for i in range(4):
    #     for j in range(4):
    #         key[j][i] = key_1[i][j]


    # key = key_1
    # print(key)
    # print_2d_array_to_hexa(key)

    for col in range(4, 4 * (10 + 1)):
        key.append([])

        if col % 4 == 0:


            # take shifted (col - 1)th column...

            tmp = [key[col - 1][row] for row in range(1, 4)]
            tmp.append(key[col - 1][0])
            # print_array_to_hexa(tmp)

            # change its elements using Sbox-table like in SubBytes...
            for j in range(4):
                # sbox_row = tmp[j] // 0x10
                # sbox_col = tmp[j] % 0x10
                # sbox_elem = sbox[16 * sbox_row + sbox_col]
                # tmp[j] = sbox_elem
                tmp[j] = sbox[tmp[j]]
            # print_array_to_hexa(tmp)

            # and finally make XOR of 3 columns
            for row in range(4):
                s = (key[col - 4][row]) ^ (tmp[row]) ^ (rcon[row][int(col / 4 - 1)])
                key[col].append(s)

        else:
            # just make XOR of 2 columns
            for row in range(4):
                s = key[col - 4][row] ^ key[col - 1][row]
                key[col].append(s)

    # print(key)

    # rotate

    key22= []
    for k in range(11):
        key22.append([key[k*4][0], key[k*4+1][0], key[k*4+2][0], key[k*4+3][0]])
        key22.append([key[k*4][1], key[k*4+1][1], key[k*4+2][1], key[k*4+3][1]])
        key22.append([key[k*4][2], key[k*4+1][2], key[k*4+2][2], key[k*4+3][2]])
        key22.append([key[k*4][3], key[k*4+1][3], key[k*4+2][3], key[k*4+3][3]])

    # print(key22)
    key=key22



    # print_2d_array_to_hexa(key)

    key77 = [j for sub in key for j in sub]
    # print(key77)

    key4 = [[],[],[],[],[],[],[],[],[],[],[]]
    for k in range(11):
        key4[k] = key77[k*16:k*16+16]

    # print(key4)


    return key4

def AES(op,input_txt ,input_key):

    hexa_txt = []
    for i in range(0, 32, 2):
        hexa_txt.append(int(input_txt[i:i + 2], 16))

    hexa_txt2 = []
    for i in range(4):
        hexa_txt2.append(hexa_txt[i])
        hexa_txt2.append(hexa_txt[i+4])
        hexa_txt2.append(hexa_txt[i + 8])
        hexa_txt2.append(hexa_txt[i + 12])
    hexa_txt=hexa_txt2

    key = key_generator(input_key)

    if op =="enc":
        hexa_txt = xor_hexa(hexa_txt, key[0])
        for i in range(1, 11):
            s_box(hexa_txt)
            shift_rows(hexa_txt)
            if (i != 10):
                hexa_txt = mix_columns(hexa_txt)
            hexa_txt = xor_hexa(hexa_txt, key[i])

    if op =="dec":
        for i in range(10, 0,-1):
            hexa_txt = xor_hexa(hexa_txt, key[i])
            if (i != 10):
                hexa_txt = inv_mix_columns(hexa_txt)
            inv_shift_rows(hexa_txt)
            inv_s_box(hexa_txt)
        hexa_txt = xor_hexa(hexa_txt, key[0])

    hexa_txt2 = []
    for i in range(4):
        hexa_txt2.append(hexa_txt[i])
        hexa_txt2.append(hexa_txt[i + 4])
        hexa_txt2.append(hexa_txt[i + 8])
        hexa_txt2.append(hexa_txt[i + 12])
    hexa_txt = hexa_txt2

    the_final_str = ""
    for i in range( hexa_txt.__len__()):
        temp = hex(hexa_txt[i]).replace("0x", "")
        if(temp.__len__() ==1):
            the_final_str += "0"
        the_final_str += temp

    return the_final_str


exit1 = ""
while exit1 !="n":
    input_key = input("enter the key :  ")
    input_txt = input("enter the text :  ")

    if (input_key.__len__() == 32 and input_key.__len__() == 32):
        input_txt = AES("enc", input_txt, input_key).swapcase()
        print("output is :",input_txt)
    else:
        print("input error")

    print("/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\")
    exit1 =input("do you want to try again ? (Y:n)")

# 5468617473206d79204b756e67204675
# 54776f204f6e65204e696e652054776f
